"""empty message

Revision ID: 217e6df96f88
Revises: edc810245f94
Create Date: 2018-05-22 12:31:12.698914

"""
from alembic import op
import sqlalchemy as sa
from waitlist.storage.database import AccountNote, Character
from waitlist.utility.constants import account_notes
import re
from waitlist import app, convention
from sqlalchemy.sql.schema import MetaData
from flask_sqlalchemy import SQLAlchemy


# revision identifiers, used by Alembic.
revision = '217e6df96f88'
down_revision = 'edc810245f94'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('account_notes', sa.Column('text_payload', sa.UnicodeText(),
                                            nullable=True))
    op.add_column('account_notes', sa.Column('type', sa.String(length=50),
                                            nullable=True))
    op.execute('COMMIT')

    # init SQLAlchemy
    metadata = MetaData(naming_convention=convention)
    db = SQLAlchemy(app, metadata=metadata)
    notes: AccountNote = db.session.query(AccountNote).all()
    for dbnote in notes:
        if dbnote.note == '':
            dbnote.note = None

        if dbnote.note == 'Account Deactivated':
            dbnote.jsonPayload = {
                'new_disabled': True
            }
            dbnote.note = None
            dbnote.type = account_notes.TYPE_ACCOUNT_ACTIVE_CHANGED
        elif dbnote.note == 'Account Activated':
            dbnote.jsonPayload = {
                'new_disabled': False
            }
            dbnote.note = None
            dbnote.type = account_notes.TYPE_ACCOUNT_ACTIVE_CHANGED
        elif dbnote.note.startswith('Creating account. '):
            dbnote.type = account_notes.TYPE_ACCOUNT_CREATED
            dbnote.note = dbnote.note[18:]  # remove the start of string
        # if it has role_changes and is not creat account is is a role change
        elif len(dbnote.role_changes) > 0:
            dbnote.type = account_notes.TYPE_ACCOUNT_ROLES_CHANGED
        elif dbnote.note.startswith('Added role with name'):
            '''
            Old note format was:
            Added role with name{role_name} and displayName {role_display_name}
            '''
            result = re.search('Added role with name(.*) and displayName (.*)',
                               dbnote.note)
            if result:
                name = result.group(1)
                displayName = result.group(2)
                dbnote.jsonPayload = {
                    'role_name': name,
                    'role_display_name': displayName
                }
                dbnote.note = None
                dbnote.type = account_notes.TYPE_ROLE_CREATED
            else:
                print(f"Error in conversion to ROLE_CREATED with Note={dbnote} entryID={dbnote.entryID}")
        elif dbnote.note.startswith('Send mail to main character linked to this account with id='):
            '''
            For this we can not recover all the information since it was not logged
            Old note format was:
            Send mail to main character linked to this account with id={acc.current_char} and name={acc.current_char_obj.eve_name}
            '''
            result = re.search('Send mail to main character linked to this account with id=(\d+) and name=.*',
                               dbnote.note)
            if result:
                character_id = result.group(1)
                dbnote.jsonPayload = {
                    'sender_character_id': None,
                    'target_character_id': character_id,
                    'mail_body': None,
                    'subject': None
                }
                dbnote.note = None
                dbnote.type = account_notes.TYPE_GOT_ACCOUNT_MAIL
            else:
                print(f"Error in conversion to GOT_ACCOUNT_MAIL with Note={dbnote} entryID={dbnote.entryID}")
        else:  # other notes should be human writting notes
            dbnote.type = account_notes.TYPE_HUMAN
    db.session.commit()

    op.alter_column('account_notes', 'type', nullable=False,
                    existing_type=sa.String(length=50))
    op.create_index(op.f('ix_account_notes_type'), 'account_notes', ['type'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_account_notes_type'), table_name='account_notes')

    # init SQLAlchemy
    metadata = MetaData(naming_convention=convention)
    db = SQLAlchemy(app, metadata=metadata)
    notes: AccountNote = db.session.query(AccountNote).all()

    for dbnote in notes:
        if dbnote.type == account_notes.TYPE_ACCOUNT_ACTIVE_CHANGED:
            if dbnote.jsonPayload['new_disabled']:
                dbnote.note = 'Account Deactivated'
            else:
                dbnote.note = 'Account Activated'
        elif dbnote.type == account_notes.TYPE_ACCOUNT_CREATED:
            dbnote.note = 'Creating account. '+dbnote.note
        elif dbnote.type == account_notes.TYPE_ROLE_CREATED:
            '''
            Old note format was:
            Added role with name{role_name} and displayName {role_display_name}
            '''
            dbnote.note = f'Added role with name{dbnote.jsonPayload["role_name"]} and displayName {dbnote.jsonPayload["role_display_name"]}'
        elif dbnote.type == account_notes.TYPE_GOT_ACCOUNT_MAIL:
            '''
            For this we can not recover all the information since it was not logged
            Old note format was:
            Send mail to main character linked to this account with id={acc.current_char} and name={acc.current_char_obj.eve_name}
            '''
            character: Character = db.session.query(Character).get(dbnote.jsonPayload['target_character_id'])
            dbnote.note = (f'Send mail to main character linked to this'
                           f' account with id='
                           f'{dbnote.jsonPayload["target_character_id"]}'
                           f' and name={character.eve_name}')
    db.session.commit()
    op.drop_column('account_notes', 'type')
    op.drop_column('account_notes', 'text_payload')
    # ### end Alembic commands ###
